if (modBetalong[i]==TRUE) { # for long formatted moderators
name1 <- paste0("d",modvarsBetamachine[i],"1","B")
name2 <- paste0("d",modvarsBetamachine[i],"2","B")
index1 <- paste0("def",modvarsBetamachine[i],"1","Beta")
index2 <- paste0("def",modvarsBetamachine[i],"2","Beta")
label <- paste0("data.",modvarsBetauser[i])
defModBeta[[index1]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label, name= name1)
defModBeta[[index2]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label, name= name2)
}
if (modBetalong[i]==FALSE) { # for wide formatted moderators
name1 <- paste0("d",modvarsBetamachine[i],"1","B")
name2 <- paste0("d",modvarsBetamachine[i],"2","B")
index1 <- paste0("def",modvarsBetamachine[i],"1","Beta")
index2 <- paste0("def",modvarsBetamachine[i],"2","Beta")
label1 <- paste0("data.",modvarsBetauser[i],sep,"1")
label2 <- paste0("data.",modvarsBetauser[i],sep,"2")
defModBeta[[index1]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label1, name= name1)
defModBeta[[index2]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label2, name= name2)
}
}
#View(defModBeta)
# Save matrices with Beta moderators as R objects
def <- NULL
for (i in names(defModBeta)) {
assign(i, defMod[[i]])
}
# Save matrices with Beta interaction effects as R objects
path <- NULL
for (i in names(pathModBetaStore)) {
assign(i, pathModBetaStore[[i]])
}
# Implement moderation
rm(list = ls())
# load packages
library(OpenMx)
library(dplyr)
library(OpenMx)
library(xtable)
data <- read.csv(file = "C:/Users/Besitzer/Documents/Arbeit/Twinlife/Artikel/Netzwerke/Git/netzwerke/Update/data_wide.csv",
header = TRUE)
# create binary
data <- data %>%
mutate(schoolbin_1 = ifelse(schoolhigh_1 %in% c(1,2), 1,
ifelse(schoolhigh_1 %in% c(3,4), 2, NA))) %>%
mutate(schoolbin_2 = ifelse(schoolhigh_2 %in% c(1,2), 1,
ifelse(schoolhigh_2 %in% c(3,4), 2, NA))) %>% rename(zy = zyg)
summary(data)
## INTEGRATE BETA  MODERATION
# moderation only of paths from ACE components on decomposed variables and from decomposed variables on decomposed variables
# new arguments:
# modACEuniv = NULL ## specify a string vector which univariate ACE paths you want to interact with which moderator
# Example: modACEuniv <- c("posbez BY schoolhigh + sex","negbez BY schoolhigh + iseiempmean")
# Explanation: Moderate univariate ACE paths of posbez by schoolhigh and sex; moderate univariate ACE paths of negbez by schoolhigh and iseiempmean
# modACEbiv = NULL ## if moderation = TRUE -> specify here if you want to moderate bivariate ACE paths, and if yes, of which variable pairs
# input element = character vector of variable relationships
# e.g.: Both, X and Y are ACE decomposed variables and the user wants to moderate the effect of the ACE components of X on Y ->
# the user needs to write: modACEbiv = "X -> Y"
# modBeta = NULL ## if moderation = TRUE -> specify here if you want to moderate a phenotypic paths between acevars, and if yes, of which variables
# necessary stuff to keep it running
acevars <- c("posbez","negbez") # three variables to be decomposed into ACE components
nv <- length(acevars) # Vars per twin
#modACEbiv <- c("X   -> Y","Z -> Y")
sep = "_"
modACEuniv <- c("posbez BY schoolhigh + sex","negbez BY schoolhigh + iseiempmean")
modACEbiv <- c("posbez   -> negbez BY schoolhigh + age")
modBeta <- c("posbez->negbez BY sex")
existence <- function(variable) {
result <- NULL
if(variable %in% colnames(data))
{
result <- NULL
}
else if (!(variable %in% colnames(data))) {
result <- variable
}
}
existenceerror <- function(result) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me: ",paste(result, sep = " ", collapse = ", ")))
}
}
###############################################################################
###############################################################################
# From here on: Code to be implemented!
splitit <- function(input) {
if (grepl("+",input) == TRUE) {
result <- unlist(strsplit(input, split = "\\->|BY|\\+"))
} else {
result <- unlist(strsplit(input, split = "\\->|BY"))
}
}
###############################################################################
# Moderation of ACE paths
###############################################################################
# Check if ACE paths are moderated
if (!is.null(modACEuniv) | !is.null(modACEbiv)) {
ACEmoderation <- TRUE
} else {
ACEmoderation <- FALSE
}
# Check if beta paths are moderated
if (!is.null(modACEuniv) | !is.null(modACEbiv)) {
ACEmoderation <- TRUE
} else {
ACEmoderation <- FALSE
}
#if (ACEmoderation == TRUE) {
###############################################################################
# univariate ACE moderation
###############################################################################
varsACEuniv <- lapply(modACEuniv,splitit)
moderatedunivACE <- list()
moderatorunivACE <- list()
for (i in 1:length(modACEuniv)) {
varsACEuniv[[i]] <- trimws(varsACEuniv[[i]])
moderatedunivACE[[i]] <- varsACEuniv[[i]][1] # save moderated vars
moderatorunivACE[[i]] <- varsACEuniv[[i]][2:length(varsACEuniv[[i]])] # save moderators
}
varsACEuniv
moderatedunivACE
moderatorunivACE
modvarsACEuniv <- unique(unlist(moderatorunivACE))
modvarsACEuniv
###############################################################################
# bivariate ACE moderation
###############################################################################
varsACEbiv <- lapply(modACEbiv,splitit)
moderatedbivACE <- list()
moderatorbivACE <- list()
for (i in 1:length(modACEbiv)) {
varsACEbiv[[i]] <- trimws(varsACEbiv[[i]])
moderatedbivACE[[i]] <- varsACEbiv[[i]][1:2] # save moderated vars
moderatorbivACE[[i]] <- varsACEbiv[[i]][3:length(varsACEbiv[[i]])] # save moderators
}
varsACEbiv
moderatedbivACE
moderatorbivACE
modvarsACEbiv <- unique(unlist(moderatorbivACE))
modvarsACEbiv
###############################################################################
# Check if moderator long or wide formatted
###############################################################################
modmatACE <- matrix(0,nrow = nv,ncol = nv, dimnames = list(acevars,acevars))
pathModACEfree <- modmatACE != 0
modvarsACEuser <- unique(c(modvarsACEuniv,modvarsACEbiv))
modvarsACEmachine <- paste0("Mod",1:length(modvarsACEuser))
legendmodACE <- rbind(modvarsACEuser,modvarsACEmachine)
legendmodACE
modvarsACEuser1 <-    paste0(modvarsACEuser,sep,"1") # Covariates twin 1
modvarsACEuser2 <-    paste0(modvarsACEuser,sep,"2") # Covariates twin 2
modvarsACEuserwide <- c(modvarsACEuser1, modvarsACEuser2)
modvarsACEusernotwide <- unlist(lapply(modvarsACEuserwide, existence))
modvarsACEusernotwide <- unique(sapply(strsplit(modvarsACEusernotwide, split = sep, fixed = TRUE), function(x) (x[1])))
modACElong <- rep(FALSE,length(modvarsACEuser))
for (i in 1:length(modvarsACEuser)) {
for (j in 1:length(modvarsACEusernotwide)) {
if (modvarsACEuser[i]==modvarsACEusernotwide[j]) {
modACElong[i] <- TRUE
}
}
}
modvarsACEuser
modACElong
###############################################################################
# Create matrix of interaction effects
###############################################################################
# Change names of Moderators
for (i in 1:length(modvarsACEuser)) {
print(i)
varsACEuniv <- lapply(varsACEuniv,gsub, pattern = modvarsACEuser[i], replacement = modvarsACEmachine[i])
}
for (i in 1:length(modvarsACEuser)) {
print(i)
varsACEbiv <- lapply(varsACEbiv,gsub, pattern = modvarsACEuser[i], replacement = modvarsACEmachine[i])
}
print(varsACEuniv)
print(varsACEbiv)
# create list that indexes free and fixed interaction effects
freeModACE <-list()
# Univariate ACE interaction effects
count <- 1
for (j in modvarsACEmachine) {
freevector <- pathModACEfree
for (i in varsACEuniv) {
if (j %in% i) {
index <- paste0("Mod",count)
diag(freevector) <- TRUE
freeModACE[[index]] <-  freevector
}
}
count <- count+1
}
# Bivariate ACE interaction effects
count <- 1
for (j in modvarsACEmachine) {
for (i in varsACEbiv) {
if (j %in% i) {
index <- paste0("Mod",count)
print(index)
if (!is.null(freeModACE[[index]])) {
freeModACE[[index]][as.vector(i)[2],as.vector(i)[1]] <- TRUE
}
if (is.null(freeModACE[[index]])) {
freeModACE[[index]] <-  freevector
freeModACE[[index]][as.vector(i)[2],as.vector(i)[1]] <- TRUE
}
}
}
count <- count+1
}
freeModACE
# create list that stores labels of interaction effects
labelACE <- list()
nvstring <- as.character(1:nv)
for (j in 1:length(freeModACE)) {
for (i in c("a","c","e")) {
pathModACElabel <- matrix(apply(expand.grid(nvstring, nvstring), 1, function(x) paste("Mod",j,"b",i,x[2], x[1], sep="")), nrow = nv, ncol = nv, byrow = TRUE)
pathModACElabel[upper.tri(pathModACElabel, diag = FALSE)] <- NA
labelACE[[paste0("Mod",j,i)]] <-pathModACElabel
}
}
View(labelACE)
# create list that stores matrices of interaction effects
count <- 1
pathModACEStore <- list()
for (i in names(freeModACE)) {
for (j in names(labelACE)) {
index <- paste0("path",j)
name <- paste0("p",j)
matrixstore <- mxMatrix(type = "Full", nrow = nv, ncol = nv, byrow = TRUE,
labels = labelACE[[j]],
free = freeModACE[[i]],
values = 0,
name = name)
pathModACEStore[[index]] <- matrixstore
}
count <- count+1
}
View(pathModACEStore)
## differentiate between long and wide formatted moderators
modACElong
# create list with matrices of moderators of ACE paths
defModACE <- list()
for (i in 1:length(modvarsACEmachine)) { # needed: new vector with same length as modvarsACEmachine, indicating whether moderator is long formatted or not (TRUE/FALSE)
if (modACElong[i]==TRUE) { # for long formatted moderators
name1 <- paste0("d",modvarsACEmachine[i],"1","ACE")
name2 <- paste0("d",modvarsACEmachine[i],"2","ACE")
index1 <- paste0("def",modvarsACEmachine[i],"1","ACE")
index2 <- paste0("def",modvarsACEmachine[i],"2","ACE")
label <- paste0("data.",modvarsACEuser[i])
defModACE[[index1]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label, name= name1)
defModACE[[index2]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label, name= name2)
}
if (modACElong[i]==FALSE) { # for wide formatted moderators
name1 <- paste0("d",modvarsACEmachine[i],"1","ACE")
name2 <- paste0("d",modvarsACEmachine[i],"2","ACE")
index1 <- paste0("def",modvarsACEmachine[i],"1","ACE")
index2 <- paste0("def",modvarsACEmachine[i],"2","ACE")
label1 <- paste0("data.",modvarsACEuser[i],sep,"1")
label2 <- paste0("data.",modvarsACEuser[i],sep,"2")
defModACE[[index1]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label1, name= name1)
defModACE[[index2]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label2, name= name2)
}
}
# Save matrices with ACE moderators as R objects
def <- NULL
for (i in names(defModACE)) {
assign(i, defModACE[[i]])
}
# Save matrices with ACE interaction effects as R objects
path <- NULL
for (i in names(pathModACEStore)) {
assign(i, pathModACEStore[[i]])
}
if (length(modvarsACEmachine) == 1) {
aModFull1 <- mxAlgebra(expression = a + pMod1a*dMod11ACE, name = "aMod1")
aModFull2 <- mxAlgebra(expression = a + pMod1a*dMod12ACE, name = "aMod2")
cModFull1 <- mxAlgebra(expression = c + pMod1c*dMod11ACE, name = "cMod1")
cModFull2 <- mxAlgebra(expression = c + pMod1c*dMod12ACE, name = "cMod2")
eModFull1 <- mxAlgebra(expression = e + pMod1e*dMod11ACE, name = "eMod1")
eModFull2 <- mxAlgebra(expression = e + pMod1e*dMod12ACE, name = "eMod2")
ACEmodpars <- c(pathMod1a,pathMod1c,pathMod1e,
defMod12ACEACE,defMod12,
aModFull1,cModFull1,eModFull1,aModFull2,cModFull2,eModFull2)
}
if (length(modvarsACEmachine) == 2) {
aModFull1 <- mxAlgebra(expression = a + pMod1a*dMod11ACE + pMod2a*dMod21ACE, name = "aMod1")
aModFull2 <- mxAlgebra(expression = a + pMod1a*dMod12ACE + pMod2a*dMod22ACE, name = "aMod2")
cModFull1 <- mxAlgebra(expression = c + pMod1c*dMod11ACE + pMod2c*dMod21ACE, name = "cMod1")
cModFull2 <- mxAlgebra(expression = c + pMod1c*dMod12ACE + pMod2c*dMod22ACE, name = "cMod2")
eModFull1 <- mxAlgebra(expression = e + pMod1e*dMod11ACE + pMod2e*dMod21ACE, name = "eMod1")
eModFull2 <- mxAlgebra(expression = e + pMod1e*dMod12ACE + pMod2e*dMod22ACE, name = "eMod2")
ACEmodpars <- c(pathMod1a,pathMod2a,pathMod1c,pathMod2c,pathMod1e,pathMod2e,
defMod12ACEACE,defMod12,defMod21ACE,defMod22ACE,
aModFull1,cModFull1,eModFull1,aModFull2,cModFull2,eModFull2)
}
if (length(modvarsACEmachine) == 3) {
aModFull1 <- mxAlgebra(expression = a + pMod1a*dMod11ACE + pMod2a*dMod21ACE + pMod3a*dMod31ACE, name = "aMod1")
aModFull2 <- mxAlgebra(expression = a + pMod1a*dMod12ACE + pMod2a*dMod22ACE + pMod3a*dMod32ACE, name = "aMod2")
cModFull1 <- mxAlgebra(expression = c + pMod1c*dMod11ACE + pMod2c*dMod21ACE + pMod3c*dMod31ACE, name = "cMod1")
cModFull2 <- mxAlgebra(expression = c + pMod1c*dMod12ACE + pMod2c*dMod22ACE + pMod3c*dMod32ACE, name = "cMod2")
eModFull1 <- mxAlgebra(expression = e + pMod1e*dMod11ACE + pMod2e*dMod21ACE + pMod3e*dMod31ACE, name = "eMod1")
eModFull2 <- mxAlgebra(expression = e + pMod1e*dMod12ACE + pMod2e*dMod22ACE + pMod3e*dMod32ACE, name = "eMod2")
ACEmodpars <- c(pathMod1a,pathMod2a,pathMod3a,pathMod1c,pathMod2c,pathMod3c,pathMod1e,pathMod2e,pathMod3e,
defMod12ACEACE,defMod12,defMod21ACE,defMod22ACE,defMod31ACE,defMod32ACE,
aModFull1,cModFull1,eModFull1,aModFull2,cModFull2,eModFull2)
}
if (length(modvarsACEmachine) == 4) {
aModFull1 <- mxAlgebra(expression = a + pMod1a*dMod11ACE + pMod2a*dMod21ACE + pMod3a*dMod31ACE + pMod4a*dMod41ACE, name = "aMod1")
aModFull2 <- mxAlgebra(expression = a + pMod1a*dMod12ACE + pMod2a*dMod22ACE + pMod3a*dMod32ACE + pMod4a*dMod42ACE, name = "aMod2")
cModFull1 <- mxAlgebra(expression = c + pMod1c*dMod11ACE + pMod2c*dMod21ACE + pMod3c*dMod31ACE + pMod4c*dMod41ACE, name = "cMod1")
cModFull2 <- mxAlgebra(expression = c + pMod1c*dMod12ACE + pMod2c*dMod22ACE + pMod3c*dMod32ACE + pMod4c*dMod42ACE, name = "cMod2")
eModFull1 <- mxAlgebra(expression = e + pMod1e*dMod11ACE + pMod2e*dMod21ACE + pMod3e*dMod31ACE + pMod4e*dMod41ACE, name = "eMod1")
eModFull2 <- mxAlgebra(expression = e + pMod1e*dMod12ACE + pMod2e*dMod22ACE + pMod3e*dMod32ACE + pMod4e*dMod42ACE, name = "eMod2")
ACEmodpars <- c(pathMod1a,pathMod2a,pathMod3a,pathMod4a,pathMod1c,pathMod2c,pathMod3c,pathMod4c,pathMod1e,pathMod2e,pathMod3e,pathMod4e,
defMod12ACEACE,defMod12,defMod21ACE,defMod22ACE,defMod31ACE,defMod32ACE,defMod41ACE,defMod42ACE,
aModFull1,cModFull1,eModFull1,aModFull2,cModFull2,eModFull2)
}
if (length(modvarsACEmachine) == 5) {
aModFull1 <- mxAlgebra(expression = a + pMod1a*dMod11ACE + pMod2a*dMod21ACE + pMod3a*dMod31ACE + pMod4a*dMod41ACE + pMod5a*dMod51ACE, name = "aMod1")
aModFull2 <- mxAlgebra(expression = a + pMod1a*dMod12ACE + pMod2a*dMod22ACE + pMod3a*dMod32ACE + pMod4a*dMod42ACE + pMod5a*dMod52ACE, name = "aMod2")
cModFull1 <- mxAlgebra(expression = c + pMod1c*dMod11ACE + pMod2c*dMod21ACE + pMod3c*dMod31ACE + pMod4c*dMod41ACE + pMod5a*dMod51ACE, name = "cMod1")
cModFull2 <- mxAlgebra(expression = c + pMod1c*dMod12ACE + pMod2c*dMod22ACE + pMod3c*dMod32ACE + pMod4c*dMod42ACE + pMod5a*dMod52ACE, name = "cMod2")
eModFull1 <- mxAlgebra(expression = e + pMod1e*dMod11ACE + pMod2e*dMod21ACE + pMod3e*dMod31ACE + pMod4e*dMod41ACE + pMod5a*dMod51ACE, name = "eMod1")
eModFull2 <- mxAlgebra(expression = e + pMod1e*dMod12ACE + pMod2e*dMod22ACE + pMod3e*dMod32ACE + pMod4e*dMod42ACE + pMod5a*dMod52ACE, name = "eMod2")
ACEmodpars <- c(pathMod1a,pathMod2a,pathMod3a,pathMod4a,pathMod5a,pathMod1c,pathMod2c,pathMod3c,pathMod4c,pathMod5c,pathMod1e,pathMod2e,pathMod3e,pathMod4e,pathMod5e,
defMod12ACEACE,defMod12,defMod21ACE,defMod22ACE,defMod31ACE,defMod32ACE,defMod41ACE,defMod42ACE,defMod51ACE,defMod52ACE,
aModFull1,cModFull1,eModFull1,aModFull2,cModFull2,eModFull2)
}
pathACE <- mxAlgebra(expression = rbind(cbind(aMod1,cMod1,eMod1,pZ,pZ,pZ),
cbind(pZ,pZ,pZ,aMod2,cMod2,eMod2)), name = "pACE")
matA <- mxAlgebra(expression = rbind(cbind(pM,pACE),
Bottom),
name = "A")
#}
View(ACEmodpars)
###############################################################################
# Moderation of Beta paths
###############################################################################
#if (Betamoderation == TRUE) {
varsBeta <- lapply(modBeta,splitit)
moderatedBeta <- list()
moderatorBeta <- list()
for (i in 1:length(varsBeta)) {
varsBeta[[i]] <- trimws(varsBeta[[i]])
moderatedBeta[[i]] <- varsBeta[[i]][1:2] # save moderated vars
moderatorBeta[[i]] <- varsBeta[[i]][3:length(varsBeta[[i]])] # save moderators
}
varsBeta
moderatedBeta
moderatorBeta
modvarsBeta <- unique(unlist(moderatorBeta))
modvarsBeta
###############################################################################
# Check if moderator long or wide formatted
###############################################################################
modmatBeta <- matrix(0,nrow = nv,ncol = nv, dimnames = list(acevars,acevars))
pathModBetafree <- modmatBeta!=0
modvarsBetauser <- unique(modvarsBeta)
modvarsBetamachine <- paste0("Mod",1:length(modvarsBetauser))
legendmodBeta <- rbind(modvarsBetauser,modvarsBetamachine)
modvarsBetauser1 <-    paste0(modvarsBetauser,sep,"1") # Covariates twin 1
modvarsBetauser2 <-    paste0(modvarsBetauser,sep,"2") # Covariates twin 2
modvarsBetauserwide <- c(modvarsBetauser1, modvarsBetauser2)
modvarsBetausernotwide <- unlist(lapply(modvarsBetauserwide, existence))
modvarsBetausernotwide <- unique(sapply(strsplit(modvarsBetausernotwide, split = sep, fixed = TRUE), function(x) (x[1])))
modBetalong <- rep(FALSE,length(modvarsBetauser))
for (i in 1:length(modvarsBetauser)) {
for (j in 1:length(modvarsBetausernotwide)) {
if (modvarsBetauser[i]==modvarsBetausernotwide[j]) {
modBetalong[i] <- TRUE
}
}
}
modvarsBetauser
modBetalong
###############################################################################
# Create matrix of interaction effects
###############################################################################
# Change names of Moderators
for (i in 1:length(modvarsBetauser)) {
varsBeta <- lapply(varsBeta,gsub, pattern = modvarsBetauser[i], replacement = modvarsBetamachine[i])
}
print(varsBeta)
# create list that indexes free and fixed interaction effects
freeModBeta <-list()
count <- 1
for (j in modvarsBetamachine) {
freevector <- pathModBetafree
for (i in varsBeta) {
if (j %in% i) {
index <- paste0("Mod",count)
freeModBeta[[index]] <-  freevector
freeModBeta[[index]][as.vector(i)[2],as.vector(i)[1]] <- TRUE
}
}
count <- count+1
}
#View(freeModBeta)
# create list that stores labels of interaction effects
labelBeta <- list()
nvstring <- as.character(1:nv)
for (j in 1:length(freeModBeta)) {
print("Hallo")
pathBlabel <- matrix(apply(expand.grid(nvstring, nvstring), 1, function(x) paste("Mod",j,"b",x[2], x[1], sep="")), nrow = nv, ncol = nv, byrow = TRUE)
pathBlabel[upper.tri(pathBlabel, diag = FALSE)] <- NA
labelBeta[[paste0("Mod",j)]] <-pathBlabel
}
#View(labelBeta)
# create list that stores matrices of interaction effects
count <- 1
pathModBetaStore <- list()
for (i in names(freeModBeta)) {
for (j in names(labelBeta)) {
index <- paste0("path",j,"Beta")
name <- paste0("p",j,"B")
matrixstore <- mxMatrix(type = "Full", nrow = nv, ncol = nv, byrow = TRUE,
labels = labelBeta[[j]],
free = freeModBeta[[i]],
values = 0,
name = name)
pathModBetaStore[[index]] <- matrixstore
}
count <- count+1
}
## differentiate between long and wide formatted moderators
modBetalong
# create list with matrices of moderators of Beta paths
defModBeta <- list()
for (i in 1:length(modvarsBetamachine)) { # needed: new vector with same length as modvarsBetamachine, indicating whether moderator is long formatted or not (TRUE/FALSE)
if (modBetalong[i]==TRUE) { # for long formatted moderators
name1 <- paste0("d",modvarsBetamachine[i],"1","B")
name2 <- paste0("d",modvarsBetamachine[i],"2","B")
index1 <- paste0("def",modvarsBetamachine[i],"1","Beta")
index2 <- paste0("def",modvarsBetamachine[i],"2","Beta")
label <- paste0("data.",modvarsBetauser[i])
defModBeta[[index1]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label, name= name1)
defModBeta[[index2]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label, name= name2)
}
if (modBetalong[i]==FALSE) { # for wide formatted moderators
name1 <- paste0("d",modvarsBetamachine[i],"1","B")
name2 <- paste0("d",modvarsBetamachine[i],"2","B")
index1 <- paste0("def",modvarsBetamachine[i],"1","Beta")
index2 <- paste0("def",modvarsBetamachine[i],"2","Beta")
label1 <- paste0("data.",modvarsBetauser[i],sep,"1")
label2 <- paste0("data.",modvarsBetauser[i],sep,"2")
defModBeta[[index1]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label1, name= name1)
defModBeta[[index2]]      <- mxMatrix( type="Full", nrow=1, ncol=1, free=FALSE, labels=label2, name= name2)
}
}
#View(defModBeta)
# Save matrices with Beta moderators as R objects
def <- NULL
for (i in names(defModBeta)) {
assign(i, defMod[[i]])
}
# Save matrices with Beta interaction effects as R objects
path <- NULL
for (i in names(pathModBetaStore)) {
assign(i, pathModBetaStore[[i]])
}
#View(defModBeta)
# Save matrices with Beta moderators as R objects
def <- NULL
for (i in names(defModBeta)) {
assign(i, defModBeta[[i]])
}
# Save matrices with Beta interaction effects as R objects
path <- NULL
for (i in names(pathModBetaStore)) {
assign(i, pathModBetaStore[[i]])
}
View(defMod11Beta)
View(pathMod1Beta)
pathMod1Beta
modvarsBetamachine
if (length(modvarsBetamachine) == 1) {
betaModFull1 <- mxAlgebra(expression = b + pMod1B*dMod11B, name = "betaMod1")
betaModFull2 <- mxAlgebra(expression = b + pMod1B*dMod12B, name = "betaMod2")
Betamodpars <- c(pathMod1Beta,
defMod11Beta,defMod12Beta,
betaModFull1,betaModFull2)
}
if (length(modvarsBetamachine) == 2) {
betaModFull1 <- mxAlgebra(expression = b + pMod1B*dMod11B + pMod2B*dMod21B, name = "betaMod1")
betaModFull2 <- mxAlgebra(expression = b + pMod1B*dMod12B + pMod2B*dMod22B, name = "betaMod2")
Betamodpars <- c(pathMod1Beta,pathMod2Beta,
defMod11Beta,defMod12Beta,defMod21Beta,defMod22Beta,
betaModFull1,betaModFull2)
}
if (length(modvarsBetamachine) == 3) {
betaModFull1 <- mxAlgebra(expression = b + pMod1B*dMod11B + pMod2B*dMod21B + pMod3B*dMod31B, name = "betaMod1")
betaModFull2 <- mxAlgebra(expression = b + pMod1B*dMod12B + pMod2B*dMod22B + pMod3B*dMod32B, name = "betaMod2")
Betamodpars <- c(pathMod1Beta,pathMod2Beta,pathMod3Beta,
defMod11Beta,defMod12Beta,defMod21Beta,defMod22Beta,defMod31Beta,defMod32Beta,
betaModFull1,betaModFull2)
}
if (length(modvarsBetamachine) == 4) {
betaModFull1 <- mxAlgebra(expression = b + pMod1B*dMod11B + pMod2B*dMod21B + pMod3B*dMod31B + pMod4B*dMod41B, name = "betaMod1")
betaModFull2 <- mxAlgebra(expression = b + pMod1B*dMod12B + pMod2B*dMod22B + pMod3B*dMod32B + pMod4B*dMod42B, name = "betaMod2")
Betamodpars <- c(pathMod1Beta,pathMod2Beta,pathMod3Beta,pathMod4Beta,
defMod11Beta,defMod12Beta,defMod21Beta,defMod22Beta,defMod31Beta,defMod32Beta,defMod41Beta,defMod42Beta,
betaModFull1,betaModFull2)
}
if (length(modvarsBetamachine) == 5) {
betaModFull1 <- mxAlgebra(expression = b + pMod1B*dMod11B + pMod2B*dMod21B + pMod3B*dMod31B + pMod4B*dMod41B + pMod5B*dMod51B, name = "betaMod1")
betaModFull2 <- mxAlgebra(expression = b + pMod1B*dMod12B + pMod2B*dMod22B + pMod3B*dMod32B + pMod4B*dMod42B + pMod5B*dMod52B, name = "betaMod2")
Betamodpars <- c(pathMod1Beta,pathMod2Beta,pathMod3Beta,pathMod4Beta,pathMod5Beta,
defMod11Beta,defMod12Beta,defMod21Beta,defMod22Beta,defMod31Beta,defMod32Beta,defMod41Beta,defMod42Beta,defMod51Beta,defMod52Beta,
betaModFull1,betaModFull2)
}
View(Betamodpars)
