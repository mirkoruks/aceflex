result <- NULL
if(variable %in% colnames(data_orig))
{
result <- NULL
}
else if (!(variable %in% colnames(data_orig))) {
result <- variable
}
}
existenceerror <- function(result) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me: ",paste(result, sep = " ", collapse = ", ")))
}
else {
print("alles gut")
}
}
# 1. check if variables exist --> for acevars in wide format and for covvars in both long (without within-pair variance) and wide (with within-pair variance)
existence <- function(variable) {
result <- NULL
if(variable %in% colnames(data_orig))
{
result <- NULL
}
else if (!(variable %in% colnames(data_orig))) {
result <- variable
}
}
existenceerror <- function(result) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me: ",paste(result, sep = " ", collapse = ", ")))
}
else {
print("alles gut")
}
}
# check for acevars (only in wide since they have to have within-pair-variance)
existence_check_acevars <- unlist(lapply(acevarswide, existence))
existenceerror(existence_check_acevars)
# check for covvars # 1. Check for wide -> 2. Check for Long
covvars <- c("age","agedifff")
covvars1 <-    paste0(covvars,sep,"1") # Covariates twin 1
covvars2 <-    paste0(covvars,sep,"2") # Covariates twin 2
covvarswide <- c(covvars1, covvars2)
covvarslong <- covvars
existence_check_covvars1 <- unlist(lapply(covvarswide, existence))
existence_check_covvars1 # für age liegen keine wide-Variablen vor -> Wide-Vektor aktualisieren und check, ob im Long-Format vorhanden
if (!is.null(existence_check_covvars1)) { # if the condition is not fulfilled, then I could not find some of the wide variables -> maybe they are long variables!
# covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- covvarswide[covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- unlist(sapply(strsplit(covvars_possibly_long_format, split=sep, fixed=TRUE), function(x) (x[1])))
covvars_possibly_long_format <- unique(covvars_possibly_long_format)
existence_check_covvars2 <- unlist(lapply(covvars_possibly_long_format, existence))
existenceerror(existence_check_covvars2)
} else {
covvarswide <- covvarswide # if the condition is fulfilled, then all the covariates are in wide format
}
existenceerror <- function(result, covariate = FALSE) {
if (covariate = FALSE) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me in the acevars-string: ",paste(result, sep = " ", collapse = ", ")))
}
else {
print("alles gut")
}
} else if (covariate = TRUE) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me  in the covvars-string: ",paste(result, sep = " ", collapse = ", ")))
}
else {
print("alles gut")
}
}
}
existenceerror <- function(result, covariate = FALSE) {
if (covariate = FALSE) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me in the acevars-string: ",paste(result, sep = " ", collapse = ", ")))
}
else {
print("alles gut")
}
}
else if (covariate = TRUE) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me  in the covvars-string: ",paste(result, sep = " ", collapse = ", ")))
}
else {
print("alles gut")
}
}
}
existenceerror <- function(result, covariate = FALSE) {
if (covariate = FALSE) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me in the acevars-string: ",paste(result, sep = " ", collapse = ", ")))
} else {
print("alles gut")
}
} else  {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me  in the covvars-string: ",paste(result, sep = " ", collapse = ", ")))
} else {
print("alles gut")
}
}
}
existenceerror <- function(result, covariate = FALSE) {
if (covariate = FALSE) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me in the acevars-string: ",paste(result, sep = " ", collapse = ", ")))
} else {
print("alles gut")
}
} else  {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me  in the covvars-string: ",paste(result, sep = " ", collapse = ", ")))
} else {
print("alles gut")
}
}
}
existenceerror <- function(result, covariate = FALSE) {
if (covariate = FALSE) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me in the acevars-string: ",paste(result, sep = " ", collapse = ", ")))
}
else {
print("alles gut")
}
}
else  {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me  in the covvars-string: ",paste(result, sep = " ", collapse = ", ")))
}
else {
print("alles gut")
}
}
}
existenceerror <- function(result) {
if (!is.null(result)) {
stop(c("I could not find a variable(s) in the data frame corresponding to the following variable strings you gave me: ",paste(result, sep = " ", collapse = ", ")))
}
else {
print("alles gut")
}
}
# check for acevars (only in wide since they have to have within-pair-variance)
existence_check_acevars <- unlist(lapply(acevarswide, existence))
existenceerror(existence_check_acevars)
# check for covvars # 1. Check for wide -> 2. Check for Long
covvars <- c("age","agedifff")
covvars1 <-    paste0(covvars,sep,"1") # Covariates twin 1
covvars2 <-    paste0(covvars,sep,"2") # Covariates twin 2
covvarswide <- c(covvars1, covvars2)
covvarslong <- covvars
existence_check_covvars1 <- unlist(lapply(covvarswide, existence))
existence_check_covvars1 # für age liegen keine wide-Variablen vor -> Wide-Vektor aktualisieren und check, ob im Long-Format vorhanden
if (!is.null(existence_check_covvars1)) { # if the condition is not fulfilled, then I could not find some of the wide variables -> maybe they are long variables!
# covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- covvarswide[covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- unlist(sapply(strsplit(covvars_possibly_long_format, split=sep, fixed=TRUE), function(x) (x[1])))
covvars_possibly_long_format <- unique(covvars_possibly_long_format)
existence_check_covvars2 <- unlist(lapply(covvars_possibly_long_format, existence))
existenceerror(existence_check_covvars2)
} else {
covvarswide <- covvarswide # if the condition is fulfilled, then all the covariates are in wide format
}
covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
# check for covvars # 1. Check for wide -> 2. Check for Long
covvars <- c("age","agediff")
covvars1 <-    paste0(covvars,sep,"1") # Covariates twin 1
covvars2 <-    paste0(covvars,sep,"2") # Covariates twin 2
covvarswide <- c(covvars1, covvars2)
covvarslong <- covvars
existence_check_covvars1 <- unlist(lapply(covvarswide, existence))
existence_check_covvars1 # für age liegen keine wide-Variablen vor -> Wide-Vektor aktualisieren und check, ob im Long-Format vorhanden
if (!is.null(existence_check_covvars1)) { # if the condition is not fulfilled, then I could not find some of the wide variables -> maybe they are long variables!
# covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- covvarswide[covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- unlist(sapply(strsplit(covvars_possibly_long_format, split=sep, fixed=TRUE), function(x) (x[1])))
covvars_possibly_long_format <- unique(covvars_possibly_long_format)
existence_check_covvars2 <- unlist(lapply(covvars_possibly_long_format, existence))
existenceerror(existence_check_covvars2)
} else {
covvarswide <- covvarswide # if the condition is fulfilled, then all the covariates are in wide format
}
covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- covvarswide[covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- unlist(sapply(strsplit(covvars_possibly_long_format, split=sep, fixed=TRUE), function(x) (x[1])))
covvars_possibly_long_format <- unique(covvars_possibly_long_format)
existence_check_covvars2 <- unlist(lapply(covvars_possibly_long_format, existence))
existenceerror(existence_check_covvars2)
existence_check_covvars2
existence_check_covvars2
covvars_possibly_long_format
existence_check_covvars1 <- unlist(lapply(covvarswide, existence))
existence_check_covvars1 # für age liegen keine wide-Variablen vor -> Wide-Vektor aktualisieren und check, ob im Long-Format vorhanden
existence_check_covvars1 <- unlist(lapply(covvarswide, existence))
covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
existence_check_covvars1 # für age liegen keine wide-Variablen vor -> Wide-Vektor aktualisieren und check, ob im Long-Format vorhanden
if (!is.null(existence_check_covvars1)) { # if the condition is not fulfilled, then I could not find some of the wide variables -> maybe they are long variables!
covvars_possibly_long_format <- covvarswide[covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- unlist(sapply(strsplit(covvars_possibly_long_format, split=sep, fixed=TRUE), function(x) (x[1])))
covvars_possibly_long_format <- unique(covvars_possibly_long_format)
existence_check_covvars2 <- unlist(lapply(covvars_possibly_long_format, existence))
existenceerror(existence_check_covvars2)
} else {
covvarswide <- covvarswide # if the condition is fulfilled, then all the covariates are in wide format
}
existence_check_covvars1 <- unlist(lapply(covvarswide, existence))
covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
existence_check_covvars1 # für age liegen keine wide-Variablen vor -> Wide-Vektor aktualisieren und check, ob im Long-Format vorhanden
if (!is.null(existence_check_covvars1)) { # if the condition is not fulfilled, then I could not find some of the wide variables -> maybe they are long variables!
covvars_possibly_long_format <- covvarswide[covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- unlist(sapply(strsplit(covvars_possibly_long_format, split=sep, fixed=TRUE), function(x) (x[1])))
covvars_possibly_long_format <- unique(covvars_possibly_long_format)
existence_check_covvars2 <- unlist(lapply(covvars_possibly_long_format, existence))
existenceerror(existence_check_covvars2)
covvarslong_checked <- covvars_possibly_long_format
} else {
covvarswide <- covvarswide # if the condition is fulfilled, then all the covariates are in wide format
}
covvars <- c(covvarslong_checked,covvarswide_checked)
covvars
# 1b: Check for covvars (can be in wide and long) -> 1. Check for wide -> 2. Check for Long if something does not appear as wide
covvars <- c("age","agediff")
covvars1 <-    paste0(covvars,sep,"1") # Covariates twin 1
covvars2 <-    paste0(covvars,sep,"2") # Covariates twin 2
covvarswide <- c(covvars1, covvars2)
existence_check_covvars1 <- unlist(lapply(covvarswide, existence))
covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
existence_check_covvars1 # für age liegen keine wide-Variablen vor -> Wide-Vektor aktualisieren und check, ob im Long-Format vorhanden
if (!is.null(existence_check_covvars1)) { # if the condition is not fulfilled, then I could not find some of the wide variables -> maybe they are long variables!
covvars_possibly_long_format <- covvarswide[covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- unlist(sapply(strsplit(covvars_possibly_long_format, split=sep, fixed=TRUE), function(x) (x[1])))
covvars_possibly_long_format <- unique(covvars_possibly_long_format)
existence_check_covvars2 <- unlist(lapply(covvars_possibly_long_format, existence))
existenceerror(existence_check_covvars2)
covvarslong_checked <- covvars_possibly_long_format
} else {
covvarswide <- covvarswide # if the condition is fulfilled, then all the covariates are in wide format
}
covvars
covvarswide
covvarswide_checked
# 1b: Check for covvars (can be in wide and long) -> 1. Check for wide -> 2. Check for Long if something does not appear as wide
covvars <- c("age","agediff")
covvars1 <-    paste0(covvars,sep,"1") # Covariates twin 1
covvars2 <-    paste0(covvars,sep,"2") # Covariates twin 2
covvarswide <- c(covvars1, covvars2)
existence_check_covvars1 <- unlist(lapply(covvarswide, existence))
covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
existence_check_covvars1 # für age liegen keine wide-Variablen vor -> Wide-Vektor aktualisieren und check, ob im Long-Format vorhanden
if (!is.null(existence_check_covvars1)) { # if the condition is not fulfilled, then I could not find some of the wide variables -> maybe they are long variables!
covvars_possibly_long_format <- covvarswide[covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- unlist(sapply(strsplit(covvars_possibly_long_format, split=sep, fixed=TRUE), function(x) (x[1])))
covvars_possibly_long_format <- unique(covvars_possibly_long_format)
existence_check_covvars2 <- unlist(lapply(covvars_possibly_long_format, existence))
existenceerror(existence_check_covvars2)
covvarslong_checked <- covvars_possibly_long_format
} else {
covvarswide <- covvarswide # if the condition is fulfilled, then all the covariates are in wide format
}
covvars <- c(covvarslong_checked,covvarswide_checked) # from now on: if a covariate ends with _1 or _2 -> it is wide!
covvars
grepl('\\_1$', covvars)
grepl(c('\\_1$','\\_2$'), covvars)
grepl('\\_*$', covvars)
str_detect(covvars, c("_1","_2"), negate = FALSE)
library(tidyverse)
str_detect(covvars, c("_1","_2"), negate = FALSE)
grepl('\\_*$', covvars)
grepl('\\_1$', covvars)
grepl('_1$', covvars)
grepl('_1', covvars)
covvars1 <- grepl('_1', covvars)
covvars2 <- grepl('_2', covvars)
covvarswide <- c(covvars1, covvars2)
covvarswide
covvars1 <- covvars[grepl('_1', covvars)]
covvars2 <- covvars[grepl('_2', covvars)]
covvarswide <- c(covvars1, covvars2)
covvarswide
covvars1
covvarswide
# 1b: Check for covvars (can be in wide and long) -> 1. Check for wide -> 2. Check for Long if something does not appear as wide
covvars <- c("age","agediff")
covvars1 <-    paste0(covvars,sep,"1") # Covariates twin 1
covvars2 <-    paste0(covvars,sep,"2") # Covariates twin 2
covvarswide <- c(covvars1, covvars2)
existence_check_covvars1 <- unlist(lapply(covvarswide, existence))
covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1]
existence_check_covvars1 # für age liegen keine wide-Variablen vor -> Wide-Vektor aktualisieren und check, ob im Long-Format vorhanden
covvarswide_checked
covvarswide
covvarswide_checked
existence_check_covvars1 # für age liegen keine wide-Variablen vor -> Wide-Vektor aktualisieren und check, ob im Long-Format vorhanden
covvarswide_checked
existence_check_covvars1
!is.null(existence_check_covvars1)
existence_check_covvars1
# 1b: Check for covvars (can be in wide and long) -> 1. Check for wide -> 2. Check for Long if something does not appear as wide
covvars <- c("age","agediff")
covvars1 <-    paste0(covvars,sep,"1") # Covariates twin 1
covvars2 <-    paste0(covvars,sep,"2") # Covariates twin 2
covvarswide <- c(covvars1, covvars2)
existence_check_covvars1 <- unlist(lapply(covvarswide, existence))
covvarswide_checked <- covvarswide[!covvarswide %in% existence_check_covvars1] # the covariates which exist in a wide format
existence_check_covvars1 # for these variables there are no wide formatted variables in the data frame -> check if they are in long format
if (!is.null(existence_check_covvars1)) { # if the condition is not fulfilled, then I could not find some of the wide variables -> maybe they are long variables!
covvars_possibly_long_format <- covvarswide[covvarswide %in% existence_check_covvars1]
covvars_possibly_long_format <- unlist(sapply(strsplit(covvars_possibly_long_format, split=sep, fixed=TRUE), function(x) (x[1])))
covvars_possibly_long_format <- unique(covvars_possibly_long_format)
existence_check_covvars2 <- unlist(lapply(covvars_possibly_long_format, existence))
existenceerror(existence_check_covvars2)
covvarslong_checked <- covvars_possibly_long_format
} else {
covvarslong_checked <- NULL # if the condition is fulfilled, then all the covariates are in wide format and none in long
}
covvars <- c(covvarslong_checked,covvarswide_checked) # from now on: if a covariate ends with _1 or _2 -> it is wide!
covvars1 <- covvars[grepl('_1', covvars)]
covvars2 <- covvars[grepl('_2', covvars)]
covvarswide <- c(covvars1, covvars2)
covvarswide
covvars
covvars1
covvars2
covvarswide
# 1a: Check for acevars (only in wide since they have to have within-pair-variance)
existence_check_acevars <- unlist(lapply(acevarswide, existence))
existenceerror(existence_check_acevars)
# acevars mit falscher acevar
acevarswide1 <- c(acevarswide,"falsch_1","falsch_2")
existence_check_acevars <- unlist(lapply(acevarswide1, existence))
existenceerror(existence_check_acevars)
# 2. check if the wide formatted variables have within-pair-variance
# function to check if columns are identical
rna <- function(x) replace(x, is.na(x), "")
acevarswide
# acevars
acevarswide
# acevars
acevars1
# 2. check if the wide formatted variables have within-pair-variance
# function to check if columns are identical
rna <- function(x) replace(x, is.na(x), "")
# acevars
acevars1
acevars2
ifelse(rna(df[,acevars1])==rna(df[,acevars2]), "YES", "NO")
ifelse(rna(data_orig[,acevars1])==rna(data_orig[,acevars2]), "YES", "NO")
a <- ifelse(rna(data_orig[,acevars1])==rna(data_orig[,acevars2]), "YES", "NO")
a == "YES"
dim(data_orig)
dim(data_orig)[1]
# acevars
data_orig[,fakewide_1] <- runif(dim(data_orig)[1])
# acevars
data_orig$fakewide_1 <- runif(dim(data_orig)[1])
summary(data_orig$fakewide_1)
acevars1_fake <- c(acevars1,data_orig$fakewide_1)
acevars1_fake
# acevars
data_orig$fakewide_1 <- runif(dim(data_orig)[1])
ind <- which(data_orig$fakewide_1 %in% sample(data_orig$fakewide_1, 15))
data_orig$fakewide_1[ind]<-NA
# acevars
data_orig$fakewide_1 <- runif(dim(data_orig)[1])
ind <- which(data_orig$fakewide_1 %in% sample(data_orig$fakewide_1, 15))
data_orig$fakewide_1[ind]<-NA
data_orig$fakewide_2 <- data_orig$fakewide_1
acevars1
acevars2
acevars1_fake <- c(acevars1,"fakewide_1")
acevars2_fake <- c(acevars2,"fakewide_2")
a <- ifelse(rna(data_orig[,acevars1])==rna(data_orig[,acevars2]), "YES", "NO")
a == "YES"
unique(a)
i1 <- sapply(a, function(x) length(unique(x)) >1)
i1
i1[i1]
a <- ifelse(rna(data_orig[,acevars1_fake])==rna(data_orig[,acevars2_fake]), "YES", "NO")
a <- ifelse(rna(data_orig[,acevars1_fake])==rna(data_orig[,acevars2_fake]), "YES", "NO")
a
a <- ifelse(rna(data_orig[,acevars1])==rna(data_orig[,acevars2]), "YES", "NO")
a
summary(data_orig)
a <- ifelse(rna(data_orig[,acevars1])==rna(data_orig[,acevars2]), 1, 1)
a <- ifelse(rna(data_orig[,acevars1_fake])==rna(data_orig[,acevars2_fake]), 1, 0)
sum(a)
colsum(a)
?colSums
colSums(a)
a1 <- ifelse(rna(data_orig[,acevars1])==rna(data_orig[,acevars2]), 1, 1)
colSums(a1)
a2 <- ifelse(rna(data_orig[,acevars1_fake])==rna(data_orig[,acevars2_fake]), 1, 0)
colSums(a2)
a1 <- ifelse(rna(data_orig[,acevars1])==rna(data_orig[,acevars2]), 0, 1)
colSums(a1)
a2 <- ifelse(rna(data_orig[,acevars1_fake])==rna(data_orig[,acevars2_fake]), 0, 1)
colSums(a2)
str(a2)
a2$
9
View(a2)
colnames(a2)
identicalcheck2 <- colSums(a2)
identicalcheck2
str(identicalcheck2)
colnames(a1)
a2
identicalcheck2 <- colSums(a2)
identicalcheck2
View(identicalcheck2)
rowSurowSums(identicalcheck2)!= 0
rowSums(identicalcheck2)!= 0
rowSums(identicalcheck2§posbez_1)!= 0
rowSums(identicalcheck2$posbez_1)!= 0
rowSums(identicalcheck2[,posbez_1])!= 0
identicalcheck2
rowSums(identicalcheck2[posbez_1,])!= 0
a2
View(a2)
identical <- function(columninput) {
result <- NULL
sum(columninput)
if(columninput != 0)
{
result <- NULL
}
else if (columninput == 0) {
result <- columninput
print(result)
}
}
identical(a2)
apply(a2,2,identical)
identical <- function(columninput) {
result <- NULL
summe <- sum(columninput)
if(summe != 0)
{
result <- NULL
}
else if (summe == 0) {
result <- summe
print(result)
}
}
apply(a2,2,identical)
identicalcheck2
as.vector(identicalcheck2)
resvec <- as.vector(identicalcheck2)
ind <- resvec==0
ind
result <- acevars1_fake[ind]
result
result1 <- acevars1_fake[ind]
result2 <- acevars2_fake[ind]
result <- c(result1,result2)
result
if (!is.null(result)) {
stop(c("The following acevars are identical",paste(result, sep = " ", collapse = ", ")))
stop("All the acevars have within-variance")
}
if (!is.null(result)) {
stop(c("The following acevars are identical: ",paste(result, sep = " ", collapse = ", ")))
stop("All the acevars have within-variance")
}
a2 <- ifelse(rna(data_orig[,acevars1_fake])==rna(data_orig[,acevars2_fake]), 0, 1)
a2 <- colSums(ifelse(rna(data_orig[,acevars1_fake])==rna(data_orig[,acevars2_fake]), 0, 1))
a1 <- ifelse(rna(data_orig[,acevars1_fake])==rna(data_orig[,acevars2_fake]), 0, 1)
a2 <- colSums(ifelse(rna(data_orig[,acevars1_fake])==rna(data_orig[,acevars2_fake]), 0, 1))
a1==a2
colSums(a1)
a2
0 %in% resvec
checkvariance <- function(v1,v2) {
identicalcheck <- as.vector(colSums(ifelse(rna(data_orig[,v1])==rna(data_orig[,v2]), 0, 1)))
if (0 %in% identicalcheck == TRUE) {
ind <- identicalcheck==0
result1 <- acevars1_fake[ind]
result2 <- acevars2_fake[ind]
result <- c(result1,result2)
if (!is.null(result)) {
stop(c("The following acevars are identical and have no within-variance: ",paste(result, sep = " ", collapse = ", ")))
}
}
}
checkvariance(acevars1_fake,acevars2_fake)
checkvariance <- function(v1,v2) {
identicalcheck <- as.vector(colSums(ifelse(rna(data_orig[,v1])==rna(data_orig[,v2]), 0, 1)))
if (0 %in% identicalcheck == TRUE) {
ind <- identicalcheck==0
result1 <- acevars1_fake[ind]
result2 <- acevars2_fake[ind]
result <- c(result1,result2)
if (!is.null(result)) {
stop(c("The following acevars are identical and have no within-variance: ",paste(result, sep = " ", collapse = ", ")))
}
}
else {
print("All the acevars have within-pair variance")
}
}
checkvariance(acevars1_fake,acevars2_fake)
checkvariance(acevars1,acevars2)
# Die fake Vars
checkvariance(acevars1_fake,acevars2_fake)
